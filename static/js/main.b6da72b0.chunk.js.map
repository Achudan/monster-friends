{"version":3,"sources":["Components/cards/cards.components.jsx","Components/card-list/card-list.component.jsx","Components/searchbox/searchbox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","address","city","CardList","monsters","map","SearchBox","placeholder","onChange","handleChange","App","event","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonster","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAEaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,uCAAUN,EAAMG,QAAQI,QAAQC,YCH3BC,G,MAAW,SAAAT,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMU,SAASC,KAAI,SAACR,GACjB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJzBQ,G,MAAY,SAACZ,GAAD,OACrB,uBAAOC,UAAU,aAAaY,YAAab,EAAMa,YAAaC,SAAUd,EAAMe,iBCiDnEC,E,kDA9Cb,aAAc,IAAD,8BACX,gBA2BFD,aAAe,SAAAE,GACb,EAAKC,SAAS,CAACC,YAAcF,EAAMG,OAAOC,SA3B1C,EAAKC,MAAQ,CACXnB,QAAQ,GAcRgB,YAAa,IAjBJ,E,qDAqBb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACf,QAAQwB,S,oBAQtC,WACE,MAAiCC,KAAKN,MAA9BnB,EAAR,EAAQA,QAASgB,EAAjB,EAAiBA,YACXU,EAAkB1B,EAAQ2B,QAAQ,SAAA3B,GAAO,OAAIA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYc,wBACnG,OACE,sBAAKhC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWY,YAAY,iBAAiBE,aAAca,KAAKb,eAC3D,cAAC,EAAD,CAAUL,SAAUmB,W,GAxCVK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b6da72b0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./cards.styles.css\";\r\nexport const Card = props =>(\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt='monster'/> \r\n        <h2>{props.monster.name}</h2>\r\n        <p>Rules {props.monster.address.city}</p>\r\n    </div>\r\n);","import React from \"react\";\r\nimport { Card } from \"../cards/cards.components\";\r\nimport \"./card-list-styles.css\";\r\nexport const CardList = props => (\r\n    <div className=\"card-list\">\r\n        {props.monsters.map((monster)=>{\r\n            return <Card key={monster.id} monster={monster}/>\r\n            })}\r\n    </div>\r\n);","import React from \"react\";\r\nimport \"./searchbox.styles.css\";\r\nexport const SearchBox = (props) =>(\r\n    <input className=\"search-box\" placeholder={props.placeholder} onChange={props.handleChange}/>\r\n);","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './Components/card-list/card-list.component';\nimport { SearchBox } from './Components/searchbox/searchbox.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monster:[\n        // {\n        //   name:\"Frankstein\",\n        //   id:\"asc1\"\n        // },\n        // {\n        //   name:\"Venom\",\n        //   id:\"asc2\"\n        // },\n        // {\n        //   name:\"Goosebumps\",\n        //   id:\"asc3\"\n        // }\n      ],\n      searchField: ''\n    };\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(res=>res.json())\n    .then(users=>this.setState({monster:users}));\n    \n  }\n\n  handleChange = event =>{\n    this.setState({searchField : event.target.value});\n  }\n\n  render(){\n    const { monster, searchField } = this.state;\n    const filteredMonster = monster.filter( monster => monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()));\n    return(\n      <div className='App'>\n        <h1>Monster Friends</h1>\n        <SearchBox placeholder='search monster' handleChange={this.handleChange} />\n        <CardList monsters={filteredMonster}/>\n        {/* {this.state.monster.map((monster)=>{return <p key={monster.id}>{monster.name}</p>})} */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}